<?php
/**
 * Email: linzongho@gmail.com
 * Github: https://github.com/linzongho/Sharin
 * User: asus
 * Date: 8/22/16
 * Time: 10:42 AM
 */
namespace Sharin\Core;
use Sharin\Component;
use Sharin\Exceptions\IO\ReadAccessDenyException;
use Sharin\Exceptions\IO\WriteAccessDenyException;
use Sharin\SharinException;
use Sharin\Utils;

/**
 * Class Storage 持久化类
 * @package Sharin
 */
class Storage extends Component {

    /**
     * 目录存在与否
     */
    const IS_EMPTY  = 0;//is empty or access deny
    const IS_FILE   = 1;
    const IS_DIR    = 2;

    protected static $name = 'storage';

    /**
     * @var array
     */
    private static $_config = [];

    public static function __initialization(array $config = null){
        parent::__initialization([
            'READ_LIMIT_ON'     => true,
            'WRITE_LIMIT_ON'    => true,
            'READABLE_SCOPE'    => SR_PATH_BASE,
            'WRITABLE_SCOPE'    => [
                SR_PATH_RUNTIME,
                SR_PATH_BASE.'/Public/rt/',//'rt' means 'runtime'
            ],
        ]);
        self::$_config = self::convention();
    }
//-------------------------------- 特征方法，仅适用于文件系统的驱动 ----------------------------------------------------------------------//
    /**
     * 文件大小格式化
     * @param int $precision
     * @param int $bytes 文件大小
     * @param int $precision 保留小数点
     * @return string
     */
    public static function formatSize($bytes, $precision = 2){
        if($bytes != 0){
            $unit = [
                'TB' => 1099511627776,  // pow( 1024, 4)
                'GB' => 1073741824,		// pow( 1024, 3)
                'MB' => 1048576,		// pow( 1024, 2)
                'KB' => 1024,			// pow( 1024, 1)
                'B ' => 1,				// pow( 1024, 0)
            ];
            foreach ($unit as $un => $mag) {
                if (doubleval($bytes) >= $mag)//floatval === doubleval
                    return round($bytes / $mag, $precision).' '.$un;
            }
        }
        return '0 B';
    }

    /**
     * 获取文件权限描述字符串
     * @param $file
     * @param bool $isfile
     * @return string
     */
    public static function perm($file,$isfile=true){
        $Mode = $isfile?fileperms($file):$file;
        $theMode = ' '.decoct($Mode);
        $theMode = substr($theMode,-4);
        $Owner = array();$Group=array();$World=array();
        if ($Mode &0x1000) $Type = 'p'; // FIFO pipe
        elseif ($Mode &0x2000) $Type = 'c'; // Character special
        elseif ($Mode &0x4000) $Type = 'd'; // Directory
        elseif ($Mode &0x6000) $Type = 'b'; // Block special
        elseif ($Mode &0x8000) $Type = '-'; // Regular
        elseif ($Mode &0xA000) $Type = 'l'; // Symbolic Link
        elseif ($Mode &0xC000) $Type = 's'; // Socket
        else $Type = 'u'; // UNKNOWN

        // Determine les permissions par Groupe
        $Owner['r'] = ($Mode &00400) ? 'r' : '-';
        $Owner['w'] = ($Mode &00200) ? 'w' : '-';
        $Owner['x'] = ($Mode &00100) ? 'x' : '-';
        $Group['r'] = ($Mode &00040) ? 'r' : '-';
        $Group['w'] = ($Mode &00020) ? 'w' : '-';
        $Group['e'] = ($Mode &00010) ? 'x' : '-';
        $World['r'] = ($Mode &00004) ? 'r' : '-';
        $World['w'] = ($Mode &00002) ? 'w' : '-';
        $World['e'] = ($Mode &00001) ? 'x' : '-';

        // Adjuste pour SUID, SGID et sticky bit
        if ($Mode &0x800) $Owner['e'] = ($Owner['e'] == 'x') ? 's' : 'S';
        if ($Mode &0x400) $Group['e'] = ($Group['e'] == 'x') ? 's' : 'S';
        if ($Mode &0x200) $World['e'] = ($World['e'] == 'x') ? 't' : 'T';
        $Mode = $Type.$Owner['r'].$Owner['w'].$Owner['x'].' '.
            $Group['r'].$Group['w'].$Group['e'].' '.
            $World['r'].$World['w'].$World['e'];
        return $Mode.' ('.$theMode.') ';
    }

    /**
     * 拷贝目录
     * 选自Kokexplorer/file.function.php
     * eg:将D:/wwwroot/下面wordpress复制到
     *	D:/wwwroot/www/explorer/0000/del/1/
     * 末尾都不需要加斜杠，复制到地址如果不加源文件夹名，
     * 就会将wordpress下面文件复制到D:/wwwroot/www/explorer/0000/del/1/下面
     * $from = 'D:/wwwroot/wordpress';
     * $to = 'D:/wwwroot/www/explorer/0000/del/1/wordpress';
     *
     * @param string $source
     * @param string $dest
     * @return bool
     */
    public static function copyDir($source, $dest){
        $result = false;
        if (!$dest or $source == substr($dest,0,strlen($source))) return false;//防止父文件夹拷贝到子文件夹，无限递归
        if (is_file($source)) {
            if ($dest[strlen($dest)-1] == '/') {
                $__dest = $dest . '/' . basename($source);
            } else {
                $__dest = $dest;
            }
            $result = copy($source, $__dest);
            chmod($__dest, 0777);
        }elseif (is_dir($source)) {
            if ($dest[strlen($dest)-1] == '/') {
                $dest = $dest . basename($source);
            }
            if (!is_dir($dest)) {
                mkdir($dest,0777);
            }
            if (!$dh = opendir($source)) return false;
            while (($file = readdir($dh)) !== false) {
                if ($file != '.' && $file != '..') {
                    if (!is_dir($source . '/' . $file)) {
                        $__dest = $dest . '/' . $file;
                    } else {
                        $__dest = $dest . '/' . $file;
                    }
                    $result = self::copyDir($source . '/' . $file, $__dest);
                }
            }
            closedir($dh);
        }
        return $result;
    }

//--------------------------------------------------- 内置 ---------------------------------------------------------------//
    /**
     * 检查目标目录是否可读取 并且对目标字符串进行修正处理
     *
     * $accesspath代表的是可以访问的目录
     * $path 表示正在访问的文件或者目录
     *
     * @param string $path 路径
     * @param bool $limiton 是否限制了访问范围
     * @param string|[] $scopes 范围
     * @return bool 表示是否可以访问
     */
    private static function checkAccessableWithRevise(&$path,$limiton,$scopes){
        if(!$limiton or !$scopes) return true;
        $temp = dirname($path);//修改的目录
        $path = Utils::toSystemEncode($path);
        is_string($scopes) and $scopes = [$scopes];
        foreach ($scopes as $scope){
            if(Utils::checkInScope($temp,$scope)){
                return true;
            }
        }
        return false;
    }

    /**
     * 检查是否有读取权限
     * @param string $path 路径
     * @return bool
     * @throws ReadAccessDenyException
     */
    private static function checkReadableWithRevise(&$path){
        return self::checkAccessableWithRevise($path,self::$_config['READ_LIMIT_ON'],self::$_config['READABLE_SCOPE']);
    }

    /**
     * 检查是否有写入权限
     * @param string $path 路径
     * @return bool
     * @throws WriteAccessDenyException
     */
    private static function checkWritableWithRevise(&$path){
        return self::checkAccessableWithRevise($path,self::$_config['WRITE_LIMIT_ON'],self::$_config['WRITABLE_SCOPE']);
    }

//----------------------------------------------------------------------------------------------------------------------
//------------------------------------ 读取 -----------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------

    /**
     * 读取文件夹内容，并返回一个数组(不包含'.'和'..')
     * array(
     *      //文件名称(相对于带读取的目录而言) => 文件内容
     *      'filename' => 'file full path',
     * );
     * @param $dirpath
     * @param bool $recursion 是否进行递归读取
     * @return array
     */
    public static function readDir(string $dirpath,bool $recursion=false){
        if(self::checkReadableWithRevise($dirpath)){
            return self::_readir($dirpath,$recursion);
        }
        return [];
    }

    /**
     * @param $dirpath
     * @param bool $recursion
     * @param bool $_isouter 辅助参数,用于判断是外部调用还是内部的
     * @return array
     */
    private static function _readir(string $dirpath,bool $recursion=false,bool $_isouter=true){
        static $_file = [];
        static $_dirpath_toread = null;
        if(true === $_isouter){
            $_file = [];
            $_dirpath_toread = $dirpath;
        }

        $handler = opendir($dirpath);
        while (($filename = readdir($handler))) {//未读到最后一个文件时候返回false,否则返回文件名称
            if ($filename === '.' or $filename === '..' ) continue;
            $fullpath = $dirpath.DIRECTORY_SEPARATOR.$filename;//子文件的完整路径
            if(file_exists($fullpath)) {
                $index = strpos($fullpath,$_dirpath_toread);
                $_file[Utils::toProgramEncode(substr($fullpath,$index+strlen($_dirpath_toread)))] =
                    str_replace('\\','/',Utils::toProgramEncode($fullpath));
            }

            if($recursion and is_dir($fullpath)) {
                $_isouter = "{$_isouter}/{$filename}";
                self::_readir($fullpath,$recursion,false);//递归,不清空
            }
        }
        closedir($handler);//关闭目录指针
        return $_file;
    }

    /**
     * 读取文件,参数参考read方法
     * @param string $filepath 文件路径
     * @param string $file_encoding
     * @param string $readout_encoding
     * @param int $maxlen Maximum length of data read. The default of php is to read until end of file is reached. But I limit to 4 MB
     * @return int|string 读取可访问并且未受保护（runtime/rt文件夹下的）的文件时返回文件内容，否则返回0表示无法获取（读取可访问且未受保护的文件夹内容）
     */
    public static function read(string $filepath,string $file_encoding='UTF-8',string $readout_encoding='UTF-8',int $maxlen=4094304){
        if(self::checkReadableWithRevise($filepath) and is_file($filepath)){
            $content = file_get_contents($filepath,null,null,null,$maxlen);//限制大小为2M
            if(false === $content) return false;//false on failure
            if(null === $file_encoding or $file_encoding === $readout_encoding){
                return $content;//return the raw content or what the read is what the need
            }else{
                $readoutEncode = "{$readout_encoding}//IGNORE";
                if(is_string($file_encoding) and false === strpos($file_encoding,',')){
                    return iconv($file_encoding,$readoutEncode,$content);
                }
                return mb_convert_encoding($content,$readoutEncode,$file_encoding);
            }
        }
        return Storage::IS_EMPTY;
    }

    /**
     * 确定文件或者目录是否存在
     * 相当于 is_file() or is_dir()
     * @param string $filepath 文件路径
     * @return int 0表示目录不存在或者无法访问,1表示是目录 2表示是文件
     */
    public static function has(string $filepath){
        if(!self::checkReadableWithRevise($filepath)) return Storage::IS_EMPTY;
        if(is_dir($filepath)) return Storage::IS_DIR;
        if(is_file($filepath)) return Storage::IS_FILE;
        return Storage::IS_EMPTY;
    }

    /**
     * 返回文件内容上次的修改时间
     * @param string $filepath 文件路径
     * @param int $mtime 修改时间
     * @return int|bool 如果是修改时间的操作返回的bool;如果是获取修改时间,则返回Unix时间戳;
     */
    public static function mtime(string $filepath,int $mtime=null){
        if(null !== $mtime){
            //设置时间,需要写的权限
            if(!self::checkWritableWithRevise($filepath)) return Storage::IS_EMPTY;
            return touch($filepath,$mtime);
        }else{
            if(!self::checkReadableWithRevise($filepath)) return Storage::IS_EMPTY;
            return file_exists($filepath) ? filemtime($filepath) : Storage::IS_EMPTY;
        }
    }

    /**
     * 获取文件按大小
     * 注：即便filesize加了@也无法防止系统的报错
     * @param string $filepath 文件路径
     * @return int|false|null 按照字节计算的单位,返回false表示是文件夹
     */
    public static function size($filepath){
        if(!self::checkReadableWithRevise($filepath)) return Storage::IS_EMPTY;//文件在保护范围内
        if(is_file($filepath)){
            return filesize($filepath);
        }elseif(is_dir($filepath)){
            return self::_sizeDir($filepath);
        }else{
            return Storage::IS_EMPTY;//文件无法访问
        }
    }

    public static function _sizeDir($dir){
        $sizeResult = 0;
        $handle = opendir($dir);
        while (false!==($FolderOrFile = readdir($handle))) {
            if($FolderOrFile != '.' && $FolderOrFile != '..') {
                $file = "$dir/$FolderOrFile";
                $sizeResult += is_dir($file)?self::_sizeDir($file) : filesize($file);
            }
        }
        closedir($handle);
        return $sizeResult;
    }

//----------------------------------------------------------------------------------------------------------------------
//------------------------------------ 写入 -----------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------
    /**
     * 创建文件夹
     * @param string $dir 文件夹路径
     * @param int $auth 文件夹权限
     * @return bool 文件夹已经存在的时候返回false,成功创建返回true
     */
    public static function mkdir($dir, $auth = 0766){
        if(!self::checkWritableWithRevise($dir)) return false;
        return is_dir($dir)?chmod($dir,$auth):mkdir($dir,$auth,true);
    }

    /**
     * 修改文件权限
     * @param string $path 文件路径
     * @param int $auth 文件权限
     * @return bool 是否成功修改了该文件|返回null表示在访问的范围之外
     * @param bool $_check  内部标记
     * @return bool
     */
    public static function chmod($path, $auth = 0766,$_check=true){
        if($_check and (!self::checkWritableWithRevise($path) or !file_exists($path))) return false;

        if (is_file($path)){
            return chmod($path,$auth);
        }else{
            if (!$dh = opendir($path)) return false;
            while (($file = readdir($dh)) !== false){
                if ($file != '.' && $file != '..') {
                    $fullpath = $path . DIRECTORY_SEPARATOR . $file;
                    chmod($fullpath,$auth);
                    return self::chmod($fullpath,$auth,false);
                }
            }
            closedir($dh);
            return chmod($path,$auth);
        }
    }

    /**
     * 设定文件的访问和修改时间
     * 注意的是:内置函数touch在文件不存在的情况下会创建新的文件,此时创建时间可能大于修改时间和访问时间
     *         但是如果是在上层目录不存在的情况下
     * @param string $filepath 文件路径
     * @param int $mtime 文件修改时间
     * @param int $atime 文件访问时间，如果未设置，则值设置为mtime相同的值
     * @return bool 是否成功|返回null表示在访问的范围之外
     */
    public static function touch($filepath, $mtime = null, $atime = null){
        if(!self::checkWritableWithRevise($filepath)) return null;
        self::checkAndMakeSubdir($filepath) or SharinException::throwing("Check path '$filepath' failed");
        return touch($filepath, $mtime,$atime);
    }

    /**
     * 删除文件
     * 删除目录时必须保证该目录为空,or set parameter 2 as true
     * @param string $filepath 文件或者目录的路径
     * @param bool $recursion 删除的目标是目录时,若目录下存在文件,是否进行递归删除,默认为false
     * @return bool
     */
    public static function unlink($filepath,$recursion=false){
        if(!self::checkWritableWithRevise($filepath)) return null;
        if(is_file($filepath)){
            return unlink($filepath);
        }elseif(is_dir($filepath)){
            return self::rmdir($filepath,$recursion);
        }
        return false; //file do not exist
    }
    /**
     * @param string $filepath
     * @param string $content
     * @param string $write_encode Encode of the text to write
     * @param string $text_encode encode of content,it will be 'UTF-8' while scruipt file is encode with 'UTF-8',but sometime it's not expect
     * @return bool
     */
    public static function write($filepath,$content,$write_encode='UTF-8',$text_encode='UTF-8'){
        if(!self::checkWritableWithRevise($filepath)) return null;
        self::checkAndMakeSubdir($filepath) or SharinException::throwing("Check path '$filepath' failed");
        //文本编码检测
        if($write_encode !== $text_encode){//写入的编码并非是文本的编码时进行转化
            $content = iconv($text_encode,"{$write_encode}//IGNORE",$content);
        }

        //文件写入
        return file_put_contents($filepath,$content) > 0;
    }

    /**
     * 将指定内容追加到文件中
     * @param string $filepath 文件路径
     * @param string $content 要写入的文件内容
     * @param string $write_encode 写入文件时的编码
     * @param string $text_encode 文本本身的编码格式,默认使用UTF-8的编码格式
     * @return bool
     */
    public static function append($filepath,$content,$write_encode='UTF-8',$text_encode='UTF-8'){
        if(!self::checkWritableWithRevise($filepath)) return null;
        //文件不存在时
        if(!is_file($filepath)) return self::write($filepath,$content,$write_encode,$text_encode);

        //打开文件
        $handler = fopen($filepath,'a+');//追加方式，如果文件不存在则无法创建
        if(false === $handler) return false;//open failed

        //编码处理
        $write_encode !== $text_encode and $content = iconv($text_encode,"{$write_encode}//IGNORE",$content);

        //关闭文件
        $rst = fwrite($handler,$content); //出现错误时返回false
        if(false === fclose($handler)) return false;//close failed

        return $rst > 0;
    }

    /**
     * 文件父目录检测
     * @param string $path the path must be encode with file system
     * @param int $auth
     * @return bool
     */
    private static function checkAndMakeSubdir($path, $auth = 0766){
        $path = dirname($path);
        if(!is_dir($path)) return self::mkdir($path,$auth);
        if(!is_writeable($path)) return self::chmod($path,$auth);
        return true;
    }

    /**
     * 删除文件夹
     * 注意:@rmdir($dirpath); 也无法阻止报错
     * @param string $dir 文件夹名路径
     * @param bool $recursion 是否递归删除
     * @return bool
     */
    private static function rmdir($dir, $recursion=false){
        if(!is_dir($dir)) return false;
        $dh = opendir($dir);
        if (!$dh) return false;
        while ($file = readdir($dh)) {
            if($file === '.' or $file === '..') continue;
            if(!$recursion) {//存在其他文件或者目录,非true时循环删除
                closedir($dh);
                return false;
            }
            $dir = SR_IS_WIN?str_replace('\\','/',"{$dir}/{$file}"):"{$dir}/{$file}";
            if(!self::unlink($dir,$recursion)) return false;
        }
        closedir($dh);
        return rmdir($dir);
    }

}