<?php
/**
 * Created by PhpStorm.
 * User: asus
 * Date: 16-10-13
 * Time: 下午2:03
 */

namespace Sharin\Addon {

    /**
     * Class Think 引入ThinkPHP 支持
     * @package Sharin\Addon
     */
    class Think extends AddonAbstract {


    }
}

namespace {

    use Sharin\Configger;
    use Sharin\Developer;
    use Sharin\Exception;

    /**-----------------------------------------------------------------------------------------------------------
     * Think 系统函数库
     * -----------------------------------------------------------------------------------------------------------
     */

    /**
     * 获取和设置配置参数 支持批量定义
     * @param string|array $name 配置变量
     * @param mixed $value 配置值
     * @param mixed $default 默认值
     * @return mixed
     */
    function C($name = null, $value = null, $default = null) {
        static $_config = array();
        // 无参数时获取所有
        if (empty($name)) {
            return $_config;
        }
        // 优先执行设置获取或赋值
        if (is_string($name)) {
            if (!strpos($name, '.')) {
                $name = strtoupper($name);
                if (!isset($value)) {
                    return isset($_config[$name]) ? $_config[$name] : $default;
                }

                $_config[$name] = $value;
                return null;
            }
            // 二维数组设置和获取支持
            $name    = explode('.', $name);
            $name[0] = strtoupper($name[0]);
            if (!isset($value)) {
                return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : $default;
            }

            $_config[$name[0]][$name[1]] = $value;
            return null;
        }
        // 批量设置
        if (is_array($name)) {
            $_config = array_merge($_config, array_change_key_case($name, CASE_UPPER));
            return null;
        }
        return null; // 避免非法参数
    }

    /**
     * 加载配置文件 支持格式转换 仅支持一级配置
     * @param string $file 配置文件名
     * @param string $parse 配置解析方法 有些格式需要用户自己解析
     * @return array
     * @throws Exception
     */
    function load_config($file, $parse = CONF_PARSE) {
        return Configger::parse($file,null,$parse);
    }

    /**
     * 抛出异常处理
     * @param string $msg 异常消息
     * @param integer $code 异常代码 默认为0
     * @throws Sharin\Exception
     * @return void
     */
    function E($msg, $code = 0)
    {
        throw new Exception($msg, $code);
    }


    /**
     * 记录和统计时间（微秒）和内存使用情况
     * 使用方法:
     * <code>
     * G('begin'); // 记录开始标记位
     * // ... 区间运行代码
     * G('end'); // 记录结束标签位
     * echo G('begin','end',6); // 统计区间运行时间 精确到小数后6位
     * echo G('begin','end','m'); // 统计区间内存使用情况
     * 如果end标记位没有定义，则会自动以当前作为标记位
     * 其中统计内存使用需要 MEMORY_LIMIT_ON 常量为true才有效
     * </code>
     * @param string $start 开始标签
     * @param string $end 结束标签
     * @param integer|string $dec 小数位或者m
     * @return mixed
     */
    function G($start, $end = '', $dec = 4)
    {
        static $_info = array();
        static $_mem  = array();
        if (is_float($end)) {
            // 记录时间
            $_info[$start] = $end;
        } elseif (!empty($end)) {
            // 统计时间和内存使用
            if (!isset($_info[$end])) {
                $_info[$end] = microtime(true);
            }

            if (MEMORY_LIMIT_ON && 'm' == $dec) {
                if (!isset($_mem[$end])) {
                    $_mem[$end] = memory_get_usage();
                }

                return number_format(($_mem[$end] - $_mem[$start]) / 1024);
            } else {
                return number_format(($_info[$end] - $_info[$start]), $dec);
            }

        } else {
            // 记录时间和内存使用
            $_info[$start] = microtime(true);
            if (MEMORY_LIMIT_ON) {
                $_mem[$start] = memory_get_usage();
            }

        }
        return null;
    }

    /**
     * 获取和设置语言定义(不区分大小写)
     * @param string|array $name 语言变量
     * @param mixed $value 语言值或者变量
     * @return mixed
     */
    function L($name = null, $value = null)
    {
        static $_lang = array();
        // 空参数返回所有定义
        if (empty($name)) {
            return $_lang;
        }

        // 判断语言获取(或设置)
        // 若不存在,直接返回全大写$name
        if (is_string($name)) {
            $name = strtoupper($name);
            if (!isset($value)) {
                return isset($_lang[$name]) ? $_lang[$name] : $name;
            } elseif (is_array($value)) {
                // 支持变量
                $replace = array_keys($value);
                foreach ($replace as &$v) {
                    $v = '{$' . $v . '}';
                }
                return str_replace($replace, $value, isset($_lang[$name]) ? $_lang[$name] : $name);
            }
            $_lang[$name] = $value; // 语言定义
            return null;
        }
        // 批量定义
        if (is_array($name)) {
            $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER));
        }

        return null;
    }

    /**
     * 添加和获取页面Trace记录
     * @param string $value 变量
     * @param string $label 标签
     * @param string $level 日志级别
     * @param boolean $record 是否记录日志
     * @return void|array
     */
    function trace($value = '[think]', $label = '', $level = 'DEBUG', $record = false)
    {
        return Developer::trace($value, $label, $level, $record);
    }

    /**
     * 编译文件
     * @param string $filename 文件名
     * @return string
     */
    function compile($filename)
    {
        $content = php_strip_whitespace($filename);
        $content = trim(substr($content, 5));
        // 替换预编译指令
        $content = preg_replace('/\/\/\[RUNTIME\](.*?)\/\/\[\/RUNTIME\]/s', '', $content);
        if (0 === strpos($content, 'namespace')) {
            $content = preg_replace('/namespace\s(.*?);/', 'namespace \\1{', $content, 1);
        } else {
            $content = 'namespace {' . $content;
        }
        if ('?>' == substr($content, -2)) {
            $content = substr($content, 0, -2);
        }

        return $content . '}';
    }


    /**
     * 获取模版文件 格式 资源://模块@主题/控制器/操作
     * @param string $template 模版资源地址
     * @param string $layer 视图层（目录）名称
     * @return string
     */
    function T($template = '', $layer = '')
    {

        // 解析模版资源地址
        if (false === strpos($template, '://')) {
            $template = 'http://' . str_replace(':', '/', $template);
        }
        $info   = parse_url($template);
        $file   = $info['host'] . (isset($info['path']) ? $info['path'] : '');
        $module = isset($info['user']) ? $info['user'] . '/' : MODULE_NAME . '/';
        $extend = $info['scheme'];
        $layer  = $layer ? $layer : C('DEFAULT_V_LAYER');

        // 获取当前主题的模版路径
        $auto = C('AUTOLOAD_NAMESPACE');
        if ($auto && isset($auto[$extend])) {
            // 扩展资源
            $baseUrl = $auto[$extend] . $module . $layer . '/';
        } elseif (C('VIEW_PATH')) {
            // 改变模块视图目录
            $baseUrl = C('VIEW_PATH');
        } elseif (defined('TMPL_PATH')) {
            // 指定全局视图目录
            $baseUrl = TMPL_PATH . $module;
        } else {
            $baseUrl = APP_PATH . $module . $layer . '/';
        }

        // 获取主题
        $theme = substr_count($file, '/') < 2 ? C('DEFAULT_THEME') : '';

        // 分析模板文件规则
        if ('' == $file) {
            // 如果模板文件名为空 按照默认规则定位
            $file = CONTROLLER_NAME . '/' . ACTION_NAME;
        } elseif (false === strpos($file, '/')) {
            $file = CONTROLLER_NAME . '/' . $file;
        }
        return $baseUrl . ($theme ? $theme . '/' : '') . $file . C('TMPL_TEMPLATE_SUFFIX');
    }


}